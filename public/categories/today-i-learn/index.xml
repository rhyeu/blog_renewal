<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Today I learn on 기억하기쉬운블로그</title>
    <link>/categories/today-i-learn/</link>
    <description>Recent content in Today I learn on 기억하기쉬운블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="/categories/today-i-learn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>os.path.join in Python</title>
      <link>/2020/06/os-path-join-in-python/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/06/os-path-join-in-python/</guid>
      <description>os.path.join : 파일 경로의 폴더명, 파일명을 인자로 받아 정상적인 파일 경로를 출력해줌 ## install.packages(&amp;quot;reticulate&amp;quot;) library(reticulate) # import os # for dirname, _, filenames in os.walk(&amp;#39;/kaggle/input&amp;#39;): # for filename in filenames: # print(os.path.join(dirname, filename)) ## Any results you write to the current directory are saved as output. 예시</description>
    </item>
    
    <item>
      <title>Today I Learn / R aggreagate 함수</title>
      <link>/2019/10/today-i-learn-/-r-aggreagate-%ED%95%A8%EC%88%98/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/10/today-i-learn-/-r-aggreagate-%ED%95%A8%EC%88%98/</guid>
      <description>출처 : http://blog.naver.com/PostView.nhn?blogId=coder1252&amp;amp;logNo=221294821930&amp;amp;parentCategoryNo=&amp;amp;categoryNo=6&amp;amp;viewDate=&amp;amp;isShowPopularPosts=true&amp;amp;from=search 엔간한 데이터 요약과 정리는 dplyr 동사들로 할 수 있지만, ’aggregate’를 사용하면 더 깔끔한 듯. 매번 찾아보다가 정말 잘 정리된 블로그가 있어 참고</description>
    </item>
    
    <item>
      <title>Today I Learn / list 중복 없애기, 2차원 행렬</title>
      <link>/2019/10/today-i-learn/</link>
      <pubDate>Thu, 03 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/10/today-i-learn/</guid>
      <description>list 중복 없애기 참조 : https://bluese05.tistory.com/13 파이썬 리스트에서 중복을 없애기 위해서 이것저것 방법이 있겠지만 ‘set’ 자료형을 사용하면 쉽게 바꿀 수 있다. ‘set’ 자료형의 특징</description>
    </item>
    
    <item>
      <title>Today I Learn / 파이썬 팁 - 리스트 출력, 연산자, range 함수</title>
      <link>/2019/09/today-i-learn/</link>
      <pubDate>Thu, 26 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/09/today-i-learn/</guid>
      <description>괄호 없이 리스트 출력하기 리스트 a = [1,2,&amp;#39;X&amp;#39;,4,5] print(*a, sep = &amp;quot; &amp;quot;) ## 1 2 X 4 5 파이썬 비트 연산자 AND : &amp;amp; OR : | XOR : ^ NOT : ~ 삼항 연산자 익숙해지면 코드가 더 간단해 질듯 a = 10</description>
    </item>
    
    <item>
      <title>Today I Learn / 주피터 노트북 포스팅</title>
      <link>/2019/09/today-i-learn/</link>
      <pubDate>Sun, 22 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/09/today-i-learn/</guid>
      <description>출처 : https://www.timlrx.com/2018/03/25/uploading-jupyter-notebook-files-to-blogdown/ blogdown으로 블로그를 운영하는데 아쉬운 건 테마, 폰트 등 수도 없지만 더 아쉬운건 파이썬을 쓰기 번거롭다는 것이다. ‘reticulate’</description>
    </item>
    
    <item>
      <title>Today I Learn / python tip (print, list, 진법, 몫, 나머지)</title>
      <link>/2019/09/today-i-learn/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/09/today-i-learn/</guid>
      <description>library(reticulate) Sys.setlocale(&amp;#39;LC_ALL&amp;#39;,&amp;#39;C&amp;#39;) ## [1] &amp;quot;C&amp;quot; 요새 코드업 기초 100제를 풀어보고 있는데 헷갈리는 것들을 정리! 1. sep 옵션 in python 파이썬에서 여러 개를 출력할 때 sep 옵션을 걸 수 있음 print(1920, 1080, sep = &amp;#39;x&amp;#39;) ## 1920x1080 print(&amp;#39;Hello&amp;#39;, &amp;#39;Python&amp;#39;,</description>
    </item>
    
    <item>
      <title>Today I Learn / cor2cov</title>
      <link>/2019/09/today-i-learn/</link>
      <pubDate>Tue, 10 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/09/today-i-learn/</guid>
      <description>cor2cov 함수 Gaussian mixture 시뮬레이션을 하는데 적절한 공분산을 컨트롤 하기 힘들었는데 적당한 함수를 발견! ‘MBESS’, ‘stremo’ 등 여러 패키지에서 제공하는데 일</description>
    </item>
    
    <item>
      <title>Today I Learn - GBHC 등</title>
      <link>/2019/08/today-i-learn/</link>
      <pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/08/today-i-learn/</guid>
      <description>Gaussian assumption을 사용한 BHC도 존재 (Bayesian Hierarchical Clustering with a Gaussian Conjugate Prior, Sirinukunwattana, Savage and Pajpoot, 2012) noise에 좀 더 Robust discretizing을 하는 시간을 줄일 수 있음 overepresentation 문제를</description>
    </item>
    
    <item>
      <title>Today I learn - eval(parse)</title>
      <link>/2019/07/today-i-learn/</link>
      <pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/07/today-i-learn/</guid>
      <description>eval(parse(text = )) 사용 법 반복문 사용할 때 항상 eval + parse를 어떻게 하는 지 애먹었는데 나를 위해 예문과 함께 정리해봄. 중요한 건 eval(parse(text = &#34; &#34; )) 괄호 안에 text의 형태로 들</description>
    </item>
    
    <item>
      <title>Today I Learn - BHC 장/단점</title>
      <link>/2019/07/today-i-learn/</link>
      <pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/07/today-i-learn/</guid>
      <description>BHC의 장점 1. predictive distribution을 활용하기 좋다. 1. 따로 cluster의 수나 distance measure를 고려하지 않아도 좋다. 1. outlier에 r</description>
    </item>
    
    <item>
      <title>Today I learn - &#39;ggfortify&#39; 패키지</title>
      <link>/2019/06/today-i-learn/</link>
      <pubDate>Fri, 28 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/06/today-i-learn/</guid>
      <description>R에서는 ‘ggfortify’ 패키지를 사용하면, PCA와 일부 클러스터링 결과에 대해 시각화를 예쁘게 해볼 수 있다. https://cran.r-project.org/web/packages/ggfortify/vignettes/plot_pca.html</description>
    </item>
    
    <item>
      <title>Today I learn - Broom / Stacking</title>
      <link>/2019/06/today-i-learn/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/06/today-i-learn/</guid>
      <description>Broom glm, Regression tree, GAM 등에서 사용가능 - 심지어 데이터 프레임으로 output이 나옴 glance : 전체 퍼포먼스 tidy : 계수 augment : predicted value Stacking fitted value가 나오는 결로 디자인 matri</description>
    </item>
    
  </channel>
</rss>
