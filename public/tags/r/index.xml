<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on 기억하기쉬운블로그</title>
    <link>https://blog-rhyeu.netlify.app/tags/r/</link>
    <description>Recent content in R on 기억하기쉬운블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog-rhyeu.netlify.app/tags/r/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>R 버전 바뀔 때마다 패키지 업데이트</title>
      <link>https://blog-rhyeu.netlify.app/2020/06/r-%EB%B2%84%EC%A0%84-%EB%B0%94%EB%80%94-%EB%95%8C%EB%A7%88%EB%8B%A4-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8/</link>
      <pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog-rhyeu.netlify.app/2020/06/r-%EB%B2%84%EC%A0%84-%EB%B0%94%EB%80%94-%EB%95%8C%EB%A7%88%EB%8B%A4-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8/</guid>
      <description>reference : 출처: https://3months.tistory.com/383 [Deep Play] R 버전 업데이트 ## install.packages(&amp;quot;installr&amp;quot;) library(installr) check.for.updates.R() # R 버전 업데이트 할 필요 있는 지 확인 updateR() # R 버전 업데이트 패키지 업데이트 update.packages(checkBuilt = T) # 모든 패키지 업데이트 packageStatus() # package 업데이</description>
    </item>
    
    <item>
      <title>Today I Learn / R aggreagate 함수</title>
      <link>https://blog-rhyeu.netlify.app/2019/10/today-i-learn-/-r-aggreagate-%ED%95%A8%EC%88%98/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog-rhyeu.netlify.app/2019/10/today-i-learn-/-r-aggreagate-%ED%95%A8%EC%88%98/</guid>
      <description>출처 : http://blog.naver.com/PostView.nhn?blogId=coder1252&amp;amp;logNo=221294821930&amp;amp;parentCategoryNo=&amp;amp;categoryNo=6&amp;amp;viewDate=&amp;amp;isShowPopularPosts=true&amp;amp;from=search 엔간한 데이터 요약과 정리는 dplyr 동사들로 할 수 있지만, ’aggregate’를 사용하면 더 깔끔한 듯. 매번 찾아보다가 정말 잘 정리된 블로그가 있어 참고</description>
    </item>
    
    <item>
      <title>Today I learn - eval(parse)</title>
      <link>https://blog-rhyeu.netlify.app/2019/07/today-i-learn/</link>
      <pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog-rhyeu.netlify.app/2019/07/today-i-learn/</guid>
      <description>eval(parse(text = )) 사용 법 반복문 사용할 때 항상 eval + parse를 어떻게 하는 지 애먹었는데 나를 위해 예문과 함께 정리해봄. 중요한 건 eval(parse(text = &#34; &#34; )) 괄호 안에 text의 형태로 들</description>
    </item>
    
    <item>
      <title>Today I learn - &#39;ggfortify&#39; 패키지</title>
      <link>https://blog-rhyeu.netlify.app/2019/06/today-i-learn/</link>
      <pubDate>Fri, 28 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog-rhyeu.netlify.app/2019/06/today-i-learn/</guid>
      <description>R에서는 ‘ggfortify’ 패키지를 사용하면, PCA와 일부 클러스터링 결과에 대해 시각화를 예쁘게 해볼 수 있다. https://cran.r-project.org/web/packages/ggfortify/vignettes/plot_pca.html</description>
    </item>
    
    <item>
      <title>Today I learn - Broom / Stacking</title>
      <link>https://blog-rhyeu.netlify.app/2019/06/today-i-learn/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog-rhyeu.netlify.app/2019/06/today-i-learn/</guid>
      <description>Broom glm, Regression tree, GAM 등에서 사용가능 - 심지어 데이터 프레임으로 output이 나옴 glance : 전체 퍼포먼스 tidy : 계수 augment : predicted value Stacking fitted value가 나오는 결로 디자인 matri</description>
    </item>
    
  </channel>
</rss>
